{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\n\n/*\r\n要求: 能根据接口文档定义接口请求\r\n包含应用中所有接口请求函数的模块\r\n每个函数的返回值都是promise\r\n\r\n基本要求: 能根据接口文档定义接口请求函数\r\n */\nimport jsonp from 'jsonp';\nimport ajax from './ajax'; // const BASE = 'http://localhost:5000'\n\nconst BASE = ''; // 登陆\n\n/*\r\nexport function reqLogin(username, password) {\r\n  return ajax('/login', {username, password}, 'POST')\r\n}*/\n\nexport const reqLogin = (username, password) => ajax(BASE + '/api1/login', {\n  username,\n  password\n}, 'POST'); // 获取一级/二级分类的列表\n\nexport const reqCategorys = parentId => ajax(BASE + '/api1/manage/category/list', {\n  parentId\n}); // 添加分类\n\nexport const reqAddCategory = (categoryName, parentId) => ajax(BASE + '/api1/manage/category/add', {\n  categoryName,\n  parentId\n}, 'POST'); // 更新分类\n\nexport const reqUpdateCategory = ({\n  categoryId,\n  categoryName\n}) => ajax(BASE + '/api1/manage/category/update', {\n  categoryId,\n  categoryName\n}, 'POST'); // 获取一个分类\n\nexport const reqCategory = categoryId => ajax(BASE + '/api1/manage/category/info', {\n  categoryId\n}); // 获取商品分页列表\n\nexport const reqProducts = (pageNum, pageSize) => ajax(BASE + '/api1/manage/product/list', {\n  pageNum,\n  pageSize\n}); // 更新商品的状态(上架/下架)\n\nexport const reqUpdateStatus = (productId, status) => ajax(BASE + '/api1/manage/product/updateStatus', {\n  productId,\n  status\n}, 'POST');\n/*\r\n搜索商品分页列表 (根据商品名称/商品描述)\r\nsearchType: 搜索的类型, productName/productDesc\r\n */\n\nexport const reqSearchProducts = ({\n  pageNum,\n  pageSize,\n  searchName,\n  searchType\n}) => ajax(BASE + '/api1/manage/product/search', {\n  pageNum,\n  pageSize,\n  [searchType]: searchName\n}); // 搜索商品分页列表 (根据商品描述)\n\n/*export const reqSearchProducts2 = ({pageNum, pageSize, searchName}) => ajax(BASE + '/manage/product/search', {\r\n  pageNum,\r\n  pageSize,\r\n  productDesc: searchName,\r\n})*/\n// 删除指定名称的图片\n\nexport const reqDeleteImg = name => ajax(BASE + '/api1/manage/img/delete', {\n  name\n}, 'POST'); // 添加/修改商品\n\nexport const reqAddOrUpdateProduct = product => ajax(BASE + '/api1/manage/product/' + (product._id ? 'update' : 'add'), product, 'POST'); // 修改商品\n// export const reqUpdateProduct = (product) => ajax(BASE + '/manage/product/update', product, 'POST')\n// 获取所有角色的列表\n\nexport const reqRoles = () => ajax(BASE + '/api1/manage/role/list'); // 添加角色\n\nexport const reqAddRole = roleName => ajax(BASE + '/api1/manage/role/add', {\n  roleName\n}, 'POST'); // 添加角色\n\nexport const reqUpdateRole = role => ajax(BASE + '/api1/manage/role/update', role, 'POST'); // 获取所有用户的列表\n\nexport const reqUsers = () => ajax(BASE + '/api1/manage/user/list'); // 删除指定用户\n\nexport const reqDeleteUser = userId => ajax(BASE + '/api1/manage/user/delete', {\n  userId\n}, 'POST'); // 添加/更新用户\n\nexport const reqAddOrUpdateUser = user => ajax(BASE + '/api1/manage/user/' + (user._id ? 'update' : 'add'), user, 'POST');\n/*\r\njson请求的接口请求函数\r\n */\n\nexport const reqWeather = city => {\n  return new Promise((resolve, reject) => {\n    const url = `http://api.map.baidu.com/telematics/v3/weather?location=${city}&output=json&ak=3p49MVra6urFRGOT9s8UBWr2`; // 发送jsonp请求\n\n    jsonp(url, {}, (err, data) => {\n      console.log('jsonp()', err, data); // 如果成功了\n\n      if (!err && data.status === 'success') {\n        // 取出需要的数据\n        const {\n          dayPictureUrl,\n          weather\n        } = data.results[0].weather_data[0];\n        resolve({\n          dayPictureUrl,\n          weather\n        });\n      } else {\n        // 如果失败了\n        _message.error('获取天气信息失败!');\n      }\n    });\n  });\n};\n/*\r\njsonp解决ajax跨域的原理\r\n  1). jsonp只能解决GET类型的ajax请求跨域问题\r\n  2). jsonp请求不是ajax请求, 而是一般的get请求\r\n  3). 基本原理\r\n   浏览器端:\r\n      动态生成<script>来请求后台接口(src就是接口的url)\r\n      定义好用于接收响应数据的函数(fn), 并将函数名通过请求参数提交给后台(如: callback=fn)\r\n   服务器端:\r\n      接收到请求处理产生结果数据后, 返回一个函数调用的js代码, 并将结果数据作为实参传入函数调用\r\n   浏览器端:\r\n      收到响应自动执行函数调用的js代码, 也就执行了提前定义好的回调函数, 并得到了需要的结果数据\r\n */","map":{"version":3,"sources":["/Users/jinpengwu/Desktop/react/gitproject/Projects/admin_work/react_original/src/api/index.js"],"names":["jsonp","ajax","BASE","reqLogin","username","password","reqCategorys","parentId","reqAddCategory","categoryName","reqUpdateCategory","categoryId","reqCategory","reqProducts","pageNum","pageSize","reqUpdateStatus","productId","status","reqSearchProducts","searchName","searchType","reqDeleteImg","name","reqAddOrUpdateProduct","product","_id","reqRoles","reqAddRole","roleName","reqUpdateRole","role","reqUsers","reqDeleteUser","userId","reqAddOrUpdateUser","user","reqWeather","city","Promise","resolve","reject","url","err","data","console","log","dayPictureUrl","weather","results","weather_data","error"],"mappings":"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","sourcesContent":["/*\r\n要求: 能根据接口文档定义接口请求\r\n包含应用中所有接口请求函数的模块\r\n每个函数的返回值都是promise\r\n\r\n基本要求: 能根据接口文档定义接口请求函数\r\n */\r\nimport jsonp from 'jsonp'\r\nimport {message} from 'antd'\r\nimport ajax from './ajax'\r\n\r\n// const BASE = 'http://localhost:5000'\r\nconst BASE = ''\r\n// 登陆\r\n/*\r\nexport function reqLogin(username, password) {\r\n  return ajax('/login', {username, password}, 'POST')\r\n}*/\r\nexport const reqLogin = (username, password) => ajax(BASE + '/api1/login', {username, password}, 'POST')\r\n\r\n// 获取一级/二级分类的列表\r\nexport const reqCategorys = (parentId) => ajax(BASE + '/api1/manage/category/list', {parentId})\r\n\r\n// 添加分类\r\nexport const reqAddCategory = (categoryName, parentId) => ajax(BASE + '/api1/manage/category/add', {categoryName, parentId}, 'POST')\r\n\r\n// 更新分类\r\nexport const reqUpdateCategory = ({categoryId, categoryName}) => ajax(BASE + '/api1/manage/category/update', {categoryId, categoryName}, 'POST')\r\n\r\n// 获取一个分类\r\nexport const reqCategory = (categoryId) => ajax(BASE + '/api1/manage/category/info', {categoryId})\r\n\r\n// 获取商品分页列表\r\nexport const reqProducts = (pageNum, pageSize) => ajax(BASE + '/api1/manage/product/list', {pageNum, pageSize})\r\n\r\n// 更新商品的状态(上架/下架)\r\nexport const reqUpdateStatus = (productId, status) => ajax(BASE + '/api1/manage/product/updateStatus', {productId, status}, 'POST')\r\n\r\n\r\n\r\n/*\r\n搜索商品分页列表 (根据商品名称/商品描述)\r\nsearchType: 搜索的类型, productName/productDesc\r\n */\r\nexport const reqSearchProducts = ({pageNum, pageSize, searchName, searchType}) => ajax(BASE + '/api1/manage/product/search', {\r\n  pageNum,\r\n  pageSize,\r\n  [searchType]: searchName,\r\n})\r\n\r\n// 搜索商品分页列表 (根据商品描述)\r\n/*export const reqSearchProducts2 = ({pageNum, pageSize, searchName}) => ajax(BASE + '/manage/product/search', {\r\n  pageNum,\r\n  pageSize,\r\n  productDesc: searchName,\r\n})*/\r\n\r\n// 删除指定名称的图片\r\nexport const reqDeleteImg = (name) => ajax(BASE + '/api1/manage/img/delete', {name}, 'POST')\r\n\r\n// 添加/修改商品\r\nexport const reqAddOrUpdateProduct = (product) => ajax(BASE + '/api1/manage/product/' + ( product._id?'update':'add'), product, 'POST')\r\n// 修改商品\r\n// export const reqUpdateProduct = (product) => ajax(BASE + '/manage/product/update', product, 'POST')\r\n\r\n\r\n// 获取所有角色的列表\r\nexport const reqRoles = () => ajax(BASE + '/api1/manage/role/list')\r\n// 添加角色\r\nexport const reqAddRole = (roleName) => ajax(BASE + '/api1/manage/role/add', {roleName}, 'POST')\r\n// 添加角色\r\nexport const reqUpdateRole = (role) => ajax(BASE + '/api1/manage/role/update', role, 'POST')\r\n\r\n\r\n// 获取所有用户的列表\r\nexport const reqUsers = () => ajax(BASE + '/api1/manage/user/list')\r\n// 删除指定用户\r\nexport const reqDeleteUser = (userId) => ajax(BASE + '/api1/manage/user/delete', {userId}, 'POST')\r\n// 添加/更新用户\r\nexport const reqAddOrUpdateUser = (user) => ajax(BASE + '/api1/manage/user/'+(user._id ? 'update' : 'add'), user, 'POST')\r\n\r\n/*\r\njson请求的接口请求函数\r\n */\r\nexport const reqWeather = (city) => {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const url = `http://api.map.baidu.com/telematics/v3/weather?location=${city}&output=json&ak=3p49MVra6urFRGOT9s8UBWr2`\r\n    // 发送jsonp请求\r\n    jsonp(url, {}, (err, data) => {\r\n      console.log('jsonp()', err, data)\r\n      // 如果成功了\r\n      if (!err && data.status==='success') {\r\n        // 取出需要的数据\r\n        const {dayPictureUrl, weather} = data.results[0].weather_data[0]\r\n        resolve({dayPictureUrl, weather})\r\n      } else {\r\n        // 如果失败了\r\n        message.error('获取天气信息失败!')\r\n      }\r\n\r\n    })\r\n  })\r\n}\r\n/*\r\njsonp解决ajax跨域的原理\r\n  1). jsonp只能解决GET类型的ajax请求跨域问题\r\n  2). jsonp请求不是ajax请求, 而是一般的get请求\r\n  3). 基本原理\r\n   浏览器端:\r\n      动态生成<script>来请求后台接口(src就是接口的url)\r\n      定义好用于接收响应数据的函数(fn), 并将函数名通过请求参数提交给后台(如: callback=fn)\r\n   服务器端:\r\n      接收到请求处理产生结果数据后, 返回一个函数调用的js代码, 并将结果数据作为实参传入函数调用\r\n   浏览器端:\r\n      收到响应自动执行函数调用的js代码, 也就执行了提前定义好的回调函数, 并得到了需要的结果数据\r\n */"]},"metadata":{},"sourceType":"module"}